var d=Object.defineProperty;var u=(p,c)=>d(p,"name",{value:c,configurable:!0});(()=>{"use strict";var p={};class c{constructor(t){this.url,this.protocol="http:",this.hostname="",this.port=80,this.pathname="/",this.queryString="",this.opts=t||{encodeURI:!1,timeout:8e3,responseType:"",retry:3,retryDelay:5500,maxRedirects:3,headers:{authorization:"",accept:"*/*"}},this.timeout=this.opts.timeout,this.responseType=this.opts.responseType,this.req_headers={...this.opts.headers},this.interceptor=null}async askOnce(t,e="GET",r){const s={requestURL:t,requestMethod:e,status:0,statusMessage:"",https:!1,req:{headers:this.req_headers,payload:void 0},res:{headers:void 0,content:void 0},time:{req:this._getTime(),res:void 0,duration:void 0}};try{t=this._parseUrl(t),s.requestURL=t,s.https=/^https/.test(this.protocol)}catch(a){const n={...s};return n.status=400,n.statusMessage=a.message||"Bad Request",n.time.res=this._getTime(),n.time.duration=this._getTimeDiff(n.time.req,n.time.res),n}this.interceptor&&await this.interceptor();const i=new AbortController,o=setTimeout(()=>i.abort(),this.timeout),h={method:e,headers:this.req_headers,signal:i.signal,...r&&!/GET/i.test(e)&&{body:/application\/json/.test(this.req_headers["content-type"])?JSON.stringify(r):r}};try{const a=await fetch(t,h);return clearTimeout(o),s.status=a.status,s.statusMessage=a.statusText,s.res.headers=this._parseHeaders(a.headers),s.res.content=await a[this.responseType||"text"](),s.time.res=this._getTime(),s.time.duration=this._getTimeDiff(s.time.req,s.time.res),s}catch(a){console.log("ERRRRR:",a),clearTimeout(o);const n={...s};return n.status=a.name==="AbortError"?408:400,n.statusMessage=a.message,n.time.res=this._getTime(),n.time.duration=this._getTimeDiff(n.time.req,n.time.res),n}}async ask(t,e="GET",r){let s=await this.askOnce(t,e,r);const i=[s];let o=1;for(;s&&/^3\d{2}/.test(s.status)&&o<=this.opts.maxRedirects;){const a=new URL(t,s.res.headers.location);s=await this.askOnce(a,e,r),i.push(s),o++}let h=1;for(;s.status===408&&h<=this.opts.retry;)await new Promise(a=>setTimeout(a,this.opts.retryDelay)),s=await this.askOnce(t,e,r),i.push(s),h++;return i}async askJSON(t,e="GET",r){let s=r;if(r&&typeof r=="string")try{s=JSON.parse(r)}catch{throw new Error("Body string is not valid JSON.")}this.setReqHeaders({accept:"application/json","content-type":"application/json; charset=utf-8"});const i=await this.askOnce(t,e,s);if(i.res.content)try{i.res.content=JSON.parse(i.res.content)}catch{throw new Error("Response content is not valid JSON.")}return i}async askHTML(t){return this.setReqHeaders({accept:"text/html","content-type":"text/html"}),await this.askOnce(t,"GET")}async askJS(t){return this.setReqHeaders({accept:"application/javascript","content-type":"application/javascript; charset=utf-8"}),await this.askOnce(t,"GET")}async sendFormData(t,e){this.setReqHeaders({accept:"*/*"}),this.delReqHeaders(["content-type"]);const r=await this.askOnce(t,"POST",e);if(r.res.content)try{r.res.content=JSON.parse(r.res.content)}catch{console.log("WARNING: Response content is not JSON.")}return r}object2formdata(t){const e=new FormData;for(const[r,s]of Object.entries(t))e.set(r,s);return e}kill(){}setInterceptor(t){this.interceptor=t.bind(this)}setReqHeaders(t){for(const[e,r]of Object.entries(t))this.req_headers[e.toLowerCase()]=r}delReqHeaders(t){for(const e of t)delete this.req_headers[e.toLowerCase()]}_parseUrl(t){const e=new URL(t);return this.protocol=e.protocol,this.hostname=e.hostname,this.port=e.port||(e.protocol==="https:"?443:80),this.pathname=e.pathname,this.queryString=e.search,this.opts.encodeURI&&(t=encodeURI(t)),t}_getTime(){return Date.now()}_getTimeDiff(t,e){return e-t}_parseHeaders(t){const e={};return t.forEach((r,s)=>{e[s]=r}),e}}u(c,"HTTPClientBroFetch");var m=null;typeof window<"u"&&(window.mikosoft||(window.mikosoft={}),window.mikosoft.HTTPClientBroFetch=c)})();

//# sourceMappingURL=httpclient-bro-fetch.min.js.map